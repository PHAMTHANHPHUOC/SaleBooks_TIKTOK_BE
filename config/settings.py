"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import pymysql
pymysql.install_as_MySQLdb()
from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv, dotenv_values
import logging
import dotenv
import environ
env = environ.Env()
environ.Env.read_env()
# Ensure .env values override any existing empty/misconfigured OS env vars
dotenv.load_dotenv(override=True)
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
GEOIP_PATH = os.path.join(BASE_DIR, "geoip")
TIME_ZONE = 'Asia/Ho_Chi_Minh'
USE_I18N = True
# Load environment variables explicitly from backend/.env and project root .env
logger = logging.getLogger(__name__)
def _load_env_file(path: str) -> None:
    try:
        if os.path.exists(path):
            # Allow values in this .env file to override existing env vars
            load_dotenv(path, override=True)
            logger.info(f"Loaded .env from: {path}")
        else:
            logger.debug(f".env not found at: {path}")
    except Exception as e:
        # Không làm hỏng quá trình khởi động nếu có lỗi khi đọc .env
        logger.warning(f"Could not load .env at {path}: {e}")

DOTENV_PATH = os.path.join(BASE_DIR, '.env')
_load_env_file(DOTENV_PATH)

# Also try project root (one level above backend) to be flexible with where .env is placed
PROJECT_ROOT = os.path.dirname(BASE_DIR)
ROOT_DOTENV_PATH = os.path.join(PROJECT_ROOT, '.env')
_load_env_file(ROOT_DOTENV_PATH)

# OpenAI Configuration
# API key mới từ tài khoản OpenAI
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY',"keyyy" )
AUTH_USER_MODEL = 'core.KhachHang'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--ukfx9$vi=y(kxh-z-^_wq!*un6prs-yh9byfrw2&^-t$-miu&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

MEDIA_URL = '/media/'
MEDIA_ROOT =  '/var/www/media'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'core',
    'django_crontab',
]

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'DIRS': [os.path.join(BASE_DIR, 'core', 'templates')], 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'salebooks_link_tiktok',               # Tên database trong Navicat
        'USER': 'salebook_user_tiktok',               # Tài khoản MySQL
        'PASSWORD': '123456',                 # Mật khẩu MySQL
        'HOST': '127.0.0.1',          # IP của máy MySQL (localhost)
        'PORT': '3306',               # Cổng MySQL (mặc định là 3306)
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Ho_Chi_Minh'

USE_I18N = True

USE_TZ = True
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "https://tiktokapi.tinydaisycoloring",
    "https://store.tinydaisycoloring.com",
]
ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "192.168.1.28",
    'tiktokapi.tinydaisycoloring.com', 'store.tinydaisycoloring.com'
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = '/var/www/static'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
         'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # Chỉ dùng cho development
CORS_ALLOW_CREDENTIALS = True


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'thanhphuocj3@gmail.com'
EMAIL_HOST_PASSWORD = 'vylrgclcqhjrxzks'
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Microsoft Teams / Power Automate webhook configuration
# Use environment variables to avoid hardcoding secrets in code
# Robust fallback: if env var is empty, read directly from .env
_dotenv_values = {}
def _normalize_env_keys(d: dict) -> dict:
    try:
        return {
            (k.lstrip('\ufeff').strip() if isinstance(k, str) else k):
            (v.strip() if isinstance(v, str) else v)
            for k, v in (d or {}).items()
        }
    except Exception:
        return d or {}
try:
    # Prefer backend .env; fallback to project root .env
    _dotenv_values = _normalize_env_keys(dotenv_values(DOTENV_PATH))
    if not _dotenv_values:
        _dotenv_values = _normalize_env_keys(dotenv_values(ROOT_DOTENV_PATH))
except Exception:
    _dotenv_values = {}

TEAMS_WEBHOOK_URL = os.getenv('TEAMS_WEBHOOK_URL') or _dotenv_values.get('TEAMS_WEBHOOK_URL', '')
TEAMS_WEBHOOK_TYPE = (os.getenv('TEAMS_WEBHOOK_TYPE') or _dotenv_values.get('TEAMS_WEBHOOK_TYPE', '')).strip()


# CRONJOBS = [
#     ('25 9 * * *', 'views.cron.call_api'),
# ]