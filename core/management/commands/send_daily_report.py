from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import datetime, timedelta
import requests
import json
import logging
from core.views.view_teams_report import get_daily_stats, create_teams_message
from django.conf import settings
from core.views.view_teams_report import adapt_payload_for_webhook

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'G·ª≠i b√°o c√°o th·ªëng k√™ h√†ng ng√†y v√†o Microsoft Teams'

    def add_arguments(self, parser):
        parser.add_argument(
            '--test',
            action='store_true',
            help='Ch·∫°y ·ªü ch·∫ø ƒë·ªô test (kh√¥ng g·ª≠i th·ª±c t·∫ø)',
        )
        parser.add_argument(
            '--time',
            type=str,
            help='Th·ªùi gian g·ª≠i b√°o c√°o (format: HH:MM)',
        )
        parser.add_argument(
            '--webhook-url',
            type=str,
            dest='webhook_url',
            help='Ghi ƒë√® URL webhook (∆∞u ti√™n h∆°n bi·∫øn m√¥i tr∆∞·ªùng)',
        )
        parser.add_argument(
            '--type',
            type=str,
            dest='webhook_type',
            choices=['incoming', 'flow'],
            help='Ki·ªÉu webhook: incoming (Teams Incoming Webhook) ho·∫∑c flow (Power Automate)',
        )

    def handle(self, *args, **options):
        test_mode = options['test']
        report_time = options.get('time')
        override_webhook_url = (options.get('webhook_url') or '').strip()
        override_webhook_type = (options.get('webhook_type') or '').strip().lower()
        
        self.stdout.write(
            self.style.SUCCESS(f'üöÄ B·∫Øt ƒë·∫ßu g·ª≠i b√°o c√°o th·ªëng k√™...')
        )
        
        try:
            # L·∫•y th·ªëng k√™
            stats = get_daily_stats()
            
            # T·∫°o message
            message = create_teams_message(stats)
            
            if test_mode:
                self.stdout.write(
                    self.style.WARNING('üß™ CH·∫†Y ·ªû CH·∫æ ƒê·ªò TEST - Kh√¥ng g·ª≠i th·ª±c t·∫ø')
                )
                self.stdout.write('üìä D·ªØ li·ªáu b√°o c√°o:')
                self.stdout.write(f'  - Ng√†y: {stats["date"]}')
                self.stdout.write(f'  - T·ªïng l∆∞·ª£t truy c·∫≠p: {stats["visit_stats"]["total_visits"]:,}')
                self.stdout.write(f'  - L∆∞·ª£t truy c·∫≠p h√¥m nay: {stats["visit_stats"]["today_visits"]:,}')
                self.stdout.write(f'  - Ng∆∞·ªùi d√πng duy nh·∫•t: {stats["visit_stats"]["unique_today"]:,}')
                self.stdout.write(f'  - S·ªë qu·ªëc gia: {len(stats["country_stats"])}')
                self.stdout.write(f'  - Top s·∫£n ph·∫©m: {len(stats["top_products"])}')
                
                self.stdout.write('\nüì§ Message s·∫Ω ƒë∆∞·ª£c g·ª≠i:')
                self.stdout.write(json.dumps(message, indent=2, ensure_ascii=False))
                
                return
            
            # G·ª≠i ƒë·∫øn Teams
            webhook_url = (override_webhook_url
                           or getattr(settings, 'TEAMS_WEBHOOK_URL', '')).strip()
            webhook_type = (override_webhook_type
                            or getattr(settings, 'TEAMS_WEBHOOK_TYPE', '')).strip().lower()
            if not webhook_type:
                if 'webhook.office.com' in webhook_url or 'office.com/webhook' in webhook_url:
                    webhook_type = 'incoming'
                elif 'powerautomate' in webhook_url or 'flow.microsoft' in webhook_url or 'environment.api.powerplatform.com' in webhook_url:
                    webhook_type = 'flow'
                else:
                    webhook_type = 'incoming'

            if not webhook_url:
                self.stdout.write(self.style.ERROR('‚ùå Ch∆∞a c·∫•u h√¨nh TEAMS_WEBHOOK_URL v√† kh√¥ng truy·ªÅn --webhook-url'))
                return

            payload = adapt_payload_for_webhook(message, webhook_type)

            response = requests.post(
                webhook_url,
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            
            if response.status_code in (200,202):
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ B√°o c√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn Microsoft Teams!')
                )
                self.stdout.write(f'üìä Th·ªëng k√™ g·ª≠i:')
                self.stdout.write(f'  - Ng√†y: {stats["date"]}')
                self.stdout.write(f'  - T·ªïng l∆∞·ª£t truy c·∫≠p: {stats["visit_stats"]["total_visits"]:,}')
                self.stdout.write(f'  - L∆∞·ª£t truy c·∫≠p h√¥m nay: {stats["visit_stats"]["today_visits"]:,}')
                self.stdout.write(f'  - Ng∆∞·ªùi d√πng duy nh·∫•t: {stats["visit_stats"]["unique_today"]:,}')
                self.stdout.write(f'  - S·ªë qu·ªëc gia: {len(stats["country_stats"])}')
                self.stdout.write(f'  - Top s·∫£n ph·∫©m: {len(stats["top_products"])}')
                
                logger.info(f"B√°o c√°o h√†ng ng√†y ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng - {stats['date']}")
                
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå L·ªói khi g·ª≠i b√°o c√°o: {response.status_code}')
                )
                self.stdout.write(f'Chi ti·∫øt l·ªói: {response.text}')
                logger.error(f"L·ªói khi g·ª≠i b√°o c√°o: {response.status_code} - {response.text}")
                
        except requests.exceptions.RequestException as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå L·ªói k·∫øt n·ªëi: {str(e)}')
            )
            logger.error(f"L·ªói k·∫øt n·ªëi khi g·ª≠i b√°o c√°o: {str(e)}")
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}')
            )
            logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i b√°o c√°o: {str(e)}")
